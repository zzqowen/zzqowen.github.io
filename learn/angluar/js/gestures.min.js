"use strict";!function(a,b){"function"==typeof define&&define.amd?define(["angular","Hammer"],function(a,c){return b({},a,c)}):"object"==typeof exports?module.exports=b({},require("angular"),require("Hammer")):angular&&b(a,a.angular,a.Hammer)}(this,function(a,b,c){b.module("angular-gestures",[]);var d={hmDoubleTap:"doubletap",hmDragstart:"panstart",hmDrag:"pan",hmDragUp:"panup",hmDragDown:"pandown",hmDragLeft:"panleft",hmDragRight:"panright",hmDragend:"panend",hmPanstart:"panstart",hmPan:"pan",hmPanUp:"panup",hmPanDown:"pandown",hmPanLeft:"panleft",hmPanRight:"panright",hmPanend:"panend",hmHold:"press",hmPinch:"pinch",hmPinchstart:"pinchstart",hmPinchend:"pinchend",hmPinchIn:"pinchin",hmPinchOut:"pinchout",hmPress:"press",hmPressUp:"pressup",hmRelease:"pressup",hmRotate:"rotate",hmSwipe:"swipe",hmSwipeUp:"swipeup",hmSwipeDown:"swipedown",hmSwipeLeft:"swipeleft",hmSwipeRight:"swiperight",hmTap:"tap",hmTouch:"touch",hmTransformstart:"transformstart",hmTransform:"transform",hmTransformend:"transformend"},e={hmDoubleTap:[c.Tap,"Hammer.Tap"],hmDragstart:[c.Pan,"Hammer.Pan"],hmDrag:[c.Pan,"Hammer.Pan"],hmDragUp:[c.Pan,"Hammer.Pan"],hmDragDown:[c.Pan,"Hammer.Pan"],hmDragLeft:[c.Pan,"Hammer.Pan"],hmDragRight:[c.Pan,"Hammer.Pan"],hmDragend:[c.Pan,"Hammer.Pan"],hmPanstart:[c.Pan,"Hammer.Pan"],hmPan:[c.Pan,"Hammer.Pan"],hmPanUp:[c.Pan,"Hammer.Pan"],hmPanDown:[c.Pan,"Hammer.Pan"],hmPanLeft:[c.Pan,"Hammer.Pan"],hmPanRight:[c.Pan,"Hammer.Pan"],hmPanend:[c.Pan,"Hammer.Pan"],hmHold:[c.Press,"Hammer.Press"],hmPinch:[c.Pinch,"Hammer.Pinch"],hmPinchstart:[c.Pinch,"Hammer.Pinch"],hmPinchend:[c.Pinch,"Hammer.Pinch"],hmPinchIn:[c.Pinch,"Hammer.Pinch"],hmPinchOut:[c.Pinch,"Hammer.Pinch"],hmPress:[c.Press,"Hammer.Press"],hmPressUp:[c.Press,"Hammer.Press"],hmRelease:[c.Press,"Hammer.Press"],hmRotate:[c.Rotate,"Hammer.Rotate"],hmSwipe:[c.Swipe,"Hammer.Swipe"],hmSwipeUp:[c.Swipe,"Hammer.Swipe"],hmSwipeDown:[c.Swipe,"Hammer.Swipe"],hmSwipeLeft:[c.Swipe,"Hammer.Swipe"],hmSwipeRight:[c.Swipe,"Hammer.Swipe"],hmTap:[c.Tap,"Hammer.Tap"]},f=!1;b.forEach(d,function(a,d){b.module("angular-gestures").directive(d,["$parse","$log","$timeout","hammerDefaultOpts",function(g,h,i,j){return function(i,k,l){var m;l.$observe(d,function(n){var o=g(n),p=g(l[d+"Opts"])(i,{}),q=b.copy(j);if(b.extend(q,p),b.isUndefined(k.hammertime)){var r=b.isDefined(q.recognizers)?q.recognizers:[],s=e[d];if(b.isDefined(s)){var t=!1;if(b.forEach(r,function(a){s[0]===a[0]&&(b.isUndefined(a[1].enable)||a[1].enable===!0)&&(t=!0)}),!t)throw new Error("Directive "+d+" requires gesture recognizer ["+s[1]+"] to be enabled")}k.hammer=new c.Manager(k[0],q),i.$on("$destroy",function(){k.hammer.off(a),k.hammer.destroy()})}m=function(b){f&&h.debug("angular-gestures: ",a,b);var c=function(){var a=o(i,{$event:b});"function"==typeof a&&a.call(i,b)};"$apply"===i.$root.$$phase||"$digest"===i.$root.$$phase?c():i.$apply(c)},k.hammer.on(a,m)})}}])}),b.module("angular-gestures").provider("hammerDefaultOpts",function(){var a={};this.set=function(b){a=b},this.$get=function(){return a}})});